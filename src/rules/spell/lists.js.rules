expression list_length
    english
        the? number of {identifier} in {list:expression}
    JS
        $list.length

expression list_position
    english
        the? position of {thing:expression} in {list:expression}
    JS
        spell.positionOf($thing, $list)

rule ordinal
    english
        (first|second|third|fourth|fifth|sixth|seventh|eighth|ninth|tenth|penultimate|final|last)
    // TODO "top" and "bottom"??
    replace
        "first" => 1
        "second" => 2
        "third" => 3
        "fourth" => 4
        "fifth" => 5
        "sixth" => 6
        "seventh" => 7
        "eighth" => 8
        "ninth" => 9
        "tenth" => 10
        "penultimate" => -2
        "final" => -1
        "last" => -1

expression nth_item
    english
        {identifier} {position:expression} of {expression}
        the {position:ordinal} {identifier} of {expression}
    JS
        spell.getItem($expression, $position)

expression random_item
    english
        a random {identifier} (of|from|in) {list:expression}
    JS
        spell.getRandomItem($list)

expression random_items
    english
        {number} random {identifier} (of|from|in) {list:expression}
    JS
        spell.getRandomItems($list, $number)

expression range_expression
    english
        {identifier} {start:expression} to {end:expression} of {list:expression}
    JS
        spell.getRange($list, $start, $end)

expression first_in_range, range_expression
    english
        first {number:expression} {identifier} (in|of) {list:expression}
    JS
        spell.getRange($list, 1, $number)

expression last_in_range, range_expression
    english
        last {number:expression} {identifier} (in|of) {list:expression}
    JS
        spell.getRange($list, $number)

expression starting_range, range_expression
    english
        {identifier} (in|of) {list:expression} starting with {thing:expression}
    JS
        spell.getRange($list, spell.positionOf($thing, $list))

expression filtered_list
    english
        {identifier} (in|of) {list:expression} where {condition:expression}
    JS
        spell.filter($list, $identifier::singularize => $condition)

expression list_membership_test
    english
        {list:expression} has (any|at least one)? {identifier} where {filter:expression}
    JS
        spell.any($list, $identifier::singularize => $filter)

expression list_membership_test
    english
        {list:expression} (has no|doesnt have any?|does not have any?) {identifier} where {filter:expression}
    JS
        !spell.any($list, $identifier::singularize => $filter)

statement append_to_list
    english
        append {thing:expression} to {list:expression}
        add {thing:expression} to (the? end of)? {list:expression}
    JS
        spell.append($list, $thing)

statement prepend_to_list
    english
        prepend {thing:expression} to {list:expression}
        add {thing:expression} to the (start|front|top) of {list:expression}
    JS
        spell.prepend($list, $thing)

statement list_add_at
    english
        add {thing:expression} to {list:expression} at position {position:number_expression}
    JS
        spell.splice($list, $position, $thing)

statement list_add_after
    english
        add {thing:expression} to {list:expression} after {item:expression}
    JS
        spell.splice($list, spell.positionOf($list, $item), $thing)

statement empty_list
    english
        (empty|clear) {list:expression}
    JS
        spell.clear($list)

statement remove_by_position_from_list
    english
        remove {identifier} {number:number_expression} of {list:expression}
    JS
        spell.removePosition($list, $number)

statement remove_range_from_list
    english
        remove {identifier} {start:number_expression} to {end:number_expression} of {list:expression}
    JS
        spell.removeRange($list, $start, $end)

statement remove_item_from_list
    english
        remove {thing:expression} from {list:expression}
    JS
        spell.remove($list, $thing)

statement remove_from_list_where
    english
        remove {identifier} (in|of|from) {list:expression} where {condition:expression}
    JS
        spell.removeWhere($list, $identifier::singularize, $condition)

statement reverse_list
    english
        reverse {list:expression}
    JS
        spell.reverse($list)

statement shuffle_list
    english
        (randomize|shuffle) {list:expression}
    JS
        spell.shuffle($list)

statement for_each
    english
        for (each)? {itemVar:identifier} in {list:expression} {statements}?
    JS
        spell.forEach($list, function($itemVar) $statements)

statement for_each
    english
        for (each)? {itemVar:identifier} (and|,) {positionVar:identifier} in {list:expression} {statements}?
    JS
        spell.forEach($list, function($itemVar, $positionVar) $statements)


