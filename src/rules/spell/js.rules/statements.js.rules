statement return_statement
    english
        return {expression}
    js
        return $expression
    tests english => js
        return it => return it


statement assignment, mutator
    english
        {thing:expression} = {value:expression}
        set {thing:expression} to {value:expression}
        put {value:expression} into {thing:expression}
    js
        $thing = $value
    test english => js
        it = that => it = that
        set it to that => it = that
        put that into it => it = that

statement get_expression, mutator
    note
        Assumes "it" is a transient in-scope variable.
    english
        get {value:expression}
    js
        it = $value
    test english => js
        get thing => it = thing

// User interaction -- TODO: move to separate file

statement notify, interaction
    async
    english
        notify {message:expression} (?:in group {group:expression}) (?:persistently)
    js
        await spell.notify($message, $group, $persistently::boolean)
    test english => js
        notify "Oh noes!" => await spell.notify("Oh noes!", undefined, false)
        notify "Oh noes!" in group "problems" => await spell.notify("Oh noes!", "problems", false)
        notify "Oh noes!" in group "problems" persistently => await spell.notify("Oh noes!", "problems", true)

statement alert, interaction
    async
    english
        alert {message:expression} (?:with {okButton:expression})
    js
        await spell.alert($message, $okButton)
    test english => js
        alert "Oh noes!" => await spell.alert("Oh noes!", undefined)
        alert "Oh noes!" with "Yep" => await spell.alert("Oh noes!", "Yep")

statement warn, interaction
    async
    english
        warn {message:expression} (?:with {okButton:expression})
    js
        await spell.warn($message, $okButton, $cancelButton)
    test english => js
        warn "Oh noes!" => await spell.warn("Oh noes!")
        warn "Oh noes!" with "Yep" => await spell.warn("Oh noes!", "Yep")

statement confirm, interaction
    async
    english
        confirm {message:expression} (?:with {okButton:expression} (?: (and|or) {cancelButton:text}))
    js
        await spell.confirm($message, $okButton, $cancelButton)
    test english => js
        confirm "Maybe?" => await spell.confirm("Maybe?", undefined, undefined)
        confirm "Maybe?" with "Yes" => await spell.confirm("Maybe?", "Yes", undefined)
        confirm "Maybe?" with "Yes" or "No" => await spell.confirm("Maybe?", "Yes", "No")

