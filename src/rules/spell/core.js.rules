TODO    number???
TODO    quoted string???

expression identifier
    pattern
        /^[a-z][\w\-]*$/

    // replace dash ("-") in identifiers with underscore ("_")
    replace
        "-" => "_"

    // add english prepositions to identifier blacklist
    blacklist
        about, above, after, and, as, at,
        before, behind, below, beneath, beside, between, beyond, by,
        defined, down, during,
        each, empty, exactly, except,
        for, from,
        greater,
        I, in, into,
        less, long,
        me, minus, more,
        near, not,
        of, off, on, onto, opposite, or, out, outside, over,
        short, since,
        than, the, then, through, thru, to, toward, towards,
        undefined, under, underneath, unique, until, up, upon, upside,
        versus, vs,
        where, with, within, without

    // add common english verbs to identifier blacklist
    blacklist
        is, are,
        do, does,
        contains,
        has, have,
        repeat,
        was, were

    // add special control keywords to identifier blacklist
    // TODO: do this where those control structures are defined?
    blacklist
        else, if, otherwise, while

expression type
    pattern
        /([A-Z][\w\-]*|list|text|number|integer|decimal|character|boolean|object)/
    replace
        "-" => "_"
    JS```
		switch (match) {
			// Alias `List` to `Array`
			case "List":		return "Array";
			case "list":		return "Array";
			case "text":		return "String";
			case "character":	return "Character";
			case "number":		return "Number";
			case "integer":		return "Integer";
			case "decimal":		return "Decimal";
			case "boolean":		return "Boolean";
			case "object":		return "Object";
			default:
				return type.replace(/\-/g, "_");
		}
    ```

expression boolean
    pattern
        /^(true|false|yes|no|ok|cancel|success|failure)$/
    JS```
		switch (match) {
			case "true":
			case "yes":
			case "ok":
			case "success":
				return true;

			default:
				return false;
		}
    ```
    // add further items to `identifier` blacklist
    extend identifier
        blacklist
            true, false, yes, no, ok, cancel, success, failure

// Translate english number expression ("twenty-five") to a number (25)
// TODO: see http://www.rexegg.com/regex-trick-numbers-in-english.html
expression named_number
    english
        (zero|one|two|three|four|five|six|seven|eight|nine|ten)
    replace
        "zero" => 0
        "one" => 1
        "two" => 2
        "three" => 3
        "four" => 4
        "five" => 5
        "six" => 6
        "seven" => 7
        "eight" => 8
        "nine" => 9
        "ten" => 10
