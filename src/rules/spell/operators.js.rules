// TODO: Precedence???
//       JS precedence rules: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence

group infix_operator_expression
group postfix_operator_expression

expression and_expression, infix_operator_expression
    english
        {a:expression} and {b:expression}
    js
        ($a && $b)
    tests english => js
        a and b => (a && b)

expression or_expression, infix_operator_expression
    english
        {a:expression} or {b:expression}
    js
        ($a || $b)
    tests english => js
        a or b => (a || b)

expression is_expression, infix_operator_expression
    english
        {a:expression} is {b:expression}
    js
        ($a == $b)
    tests english => js
        a is b => (a == b)

expression is not_expression, infix_operator_expression
    english
        {a:expression} is not {b:expression}
    js
        ($a !+ $b)
    tests english => js
        a is not b => (a != b)

expression is exactly_expression, infix_operator_expression
    english
        {a:expression} is exactly {b:expression}
    js
        ($a === $b)
    tests english => js
        a is exactly b => (a === b)
`
expression is not exactly_expression, infix_operator_expression
    english
        {a:expression} is not exactly {b:expression}
    js
        ($a !== $b)
    tests english => js
        a is not exactly b => (a !== b)

expression is_a_expression, infix_operator_expression
    english
        {it:expression} is (a|an) {type:expression}
    js
        spell.isOfType($it, "$type")
    tests english => js
        it is a thing => spell.isOfType(it, "thing")
        it is an animal => spell.isOfType(it, "animal")

expression is_not_a_expression, infix_operator_expression
    english
        {it:expression} is not (a|an) {type:expression}
    js
        !spell.isOfType($it, "$type")
    tests english => js
        it is not a thing => !spell.isOfType(it, "thing")
        it is not an animal => !spell.isOfType(it, "animal")

expression is_in_expression, infix_operator_expression
    english
        {thing:expression} (is in|is one of) {set:expression}
    js
        spell.includes(set, thing)
    tests english => js
        card is in cards => spell.includes(cards, card)
        card is one of cards => spell.includes(cards, card)

expression is_not_in_expression, infix_operator_expression
    english
        {thing:expression} (is not in|is not one of) {set:expression}
    js
        !spell.includes(set, thing)
    tests english => js
        card is not in cards => !spell.includes(cards, card)
        card is not one of cards => !spell.includes(cards, card)

expression includes_expression, infix_operator_expression
    english
        {set:expression} (includes|contains) {thing:expression}
    js
        spell.includes(set, thing)
    tests english => js
        cards includes card => spell.includes(cards, card)
        cards contains card => spell.includes(cards, card)

expression does_not_include_expression, infix_operator_expression
    english
        {set:expression} (does not include|does not contain) {thing:expression}
    js
        !spell.includes(set, thing)
    tests english => js
        cards does not include card => !spell.includes(cards, card)
        cards does not contain card => !spell.includes(cards, card)

expression greater_than_expression, infix_operator_expression
    english
        {a:expression} (>|is greater than) {b:expression}
    js
        ($a > $b)
    tests english => js
        a > b => (a > b)
        a is greater than b => (a > b)

expression greater_than_or_equal_expression, infix_operator_expression
    precedence 11
    english
        {a:expression} (>=|≥|is greater than or equal to) {b:expression}
    js
        ($a >= $b)
    tests english ==> js
        a >= b ==> (a >= b)
        a ≥ b ==> (a >= b)
        a is greater than or equal to b ==> (a >= b)

expression less_than_or_equal_expression, infix_operator_expression
    english
        {a:expression} (<=|≤|is less than or equal to) {b:expression}
    js
        ($a <= $b)
    tests english ==> js
        a <= b => (a <= b)
        a ≤ b => (a <= b)
        a is less than or equal to b => (a <= b)

expression plus_expression, infix_operator_expression
    english
        {a:expression} (\\+|plus) {b:expression}
    js
        ($a + $b)
    tests english => js
        a + b => (a + b)
        a plus b => (a + b)

expression minus_expression, infix_operator_expression
    english
        {a:expression} (-|minus) {b:expression}
    js
        ($a - $b)
    tests english => js
        a - b => (a - b)
        a minus b => (a - b)

expression times_expression, infix_operator_expression
    english
        {a:expression} (\\*|times) {b:expression}
    js
        ($a * $b)
    tests english => js
        a * b => (a * b)
        a times b => (a * b)

expression divided_by_expression, infix_operator_expression
    english
        {a:expression} (/|divided by) {b:expression}
    js
        ($a / $b)
    tests english => js
        a / b => (a / b)
        a divided by b => (a divided by b)

expression is_defined_expression, postfix_operator_expression
    english
        {it:expression} is defined
    js
        (typeof $it !== "undefined")
    tests english => js
        it is defined => (typeof it !== "undefined")

expression is_not_defined_expression, postfix_operator_expression
    english
        {it:expression} is (not defined|undefined)
    js
        (typeof $it === "undefined")
    tests english => js
        it is not defined => (typeof it === "undefined")
        it is undefined => (typeof it === "undefined")

expression is_empty_expression, postfix_operator_expression
    english
        {it:expression} is empty
    js
        spell.isEmpty($it)
    tests english => js
        it is empty => spell.isEmpty(it)

expression is_not_empty_expression, postfix_operator_expression
    english
        {it:expression} is (not empty|non-empty)
    js
        !spell.isEmpty($it)
    tests english => js
        it is not empty => !spell.isEmpty(it)
        it is non-empty => !spell.isEmpty(it)
