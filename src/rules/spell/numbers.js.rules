// Match all english number strings to their numeric equivalent from 0 => 999,999,999
// e.g. "one hundred twenty-three" => 123
// e.g. "four thousand two hundred and eleven" => 4,211
// e.g. "two hundred forty-two thousand three hundred and seven" => 242,307
// e.g. "thirteen million and four" => 13,000,004
//
// SEE:  http://www.rexegg.com/regex-trick-numbers-in-english.html
// TODO: DECIMALS? (point three two four one five)


rule zero
    english
        zero
    JS
        0

rule one_to_nine
    english
        (one|two|three|four|five|six|seven|eight|nine)
    replace
		"one" => 1
		"two" => 2
		"three" => 3
		"four" => 4
		"five" => 5
		"six" => 6
		"seven" => 7
		"eight" => 8
		"nine" => 9

rule zero_to_nine
    english
        ({zero}|{one_to_nine})


rule decimal
    // TODO: use list syntax here???  what does {zero_to_nine}+ give us in terms of parse???
    english
        point {zero_to_nine}+
    JS```
        parseFloat("0." + $zero_to_nine.join(""))
    ```


rule teens
    english
        (eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen)
    replace
		"eleven" => 11
		"twelve" => 12
		"thirteen" => 13
		"fourteen" => 14
		"fifteen" => 15
		"sixteen" => 16
		"seventeen" => 17
		"eighteen" => 18
		"nineteen" => 19

rule tens
    english
        (ten|twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety)
    replace
		"ten" => 10
		"twenty" => 20
		"thirty" => 30
		"forty" => 40
		"fifty" => 50
		"sixty" => 60
		"seventy" => 70
		"eighty" => 80
		"ninety" => 90

rule under_100
    english
        {teens}
        {tens}(-)?{one_to_nine}
        {one_to_nine}
    JS```
        if ($teens) return $teens;
        if ($tens and $one_to_nine) return $tens + $one_to_nine;
        if ($tens) return $tens;
        return $one_to_nine;
    ```

rule hundreds
    english
        {hundreds:under_100} hundred (and? {under_100})?
    JS```
        return $hundreds * 100 + ($under_100 || 0) + ($decimal || 0)
    ```

rule thousands
    english
        {thousands:hundreds} thousand {hundreds}?
    JS```
        return $thousands * 1000 + ($hundreds || 0)
    ```

rule millions
    english
        {millions:hundreds} million ${thousands}
    JS```
        return $millions * 1000000 + ($thousands || 0)
    ```
rule billions
    english
        {millions:hundreds} billion ${millions}
    JS```
        return $millions * 1000000 + ($millions || 0)
    ```


expression named_number
    english
        (whole_number:{zero}|{billions}|{millions}|{thousands}|{hundreds}) {decimal}?
    JS```
        return $whole_number + ($decimal || 0)
    ```
