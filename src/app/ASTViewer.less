@import "syntax.less";

.ASTViewer {
  position: relative;
  padding: 8px;
  height: 100%;
  overflow: auto;
}


.ASTNode {
  white-space: pre;

  &.highlight {
    background: rgb(245, 236, 212);
  }

  /* Block with curlies inside an ASTNode. */
  .ASTBlock {
    // Indent blockContents. This looks right but loses spaces on copy-paste.
    .blockContents.indented {
      display: inline-block;
      vertical-align: top;
      margin-left: 1em;
    }
  /* end .ASTBlock */
  }

  .punctuation {
    .syntax-punctuation()
  }
  .operator {
    .syntax-operator()
  }

  .keyword,
  &.ThisLiteral {
    .syntax-keyword()
  }

  &.LineComment,
  &.BlockComment {
    .syntax-comment()
  }

  &.LineComment.header {
    .syntax-comment-header()
  }

  &.ParserAnnotation {
    .syntax-parser-annotation()
  }

  &.StringLiteral,
  &.QuotedExpression,
  &.QuotedExpression .PropertyLiteral {
    .syntax-string()
  }  

  &.ConstantExpression {
    .syntax-enum()
  }

  &.NumericLiteral {
    .syntax-number()
  }

  &.BooleanLiteral {
    .syntax-boolean()
  }

  &.TypeExpression {
    .syntax-class()
  }
  // &.PrototypeExpression .keyword.prototype {
  //   .syntax-class()
  // }


  &.VariableExpression > .name {
    .syntax-variable()
  }
  &.AssignmentStatement.declaration .VariableExpression > .name {
    .syntax-variable-declaration()
  }

  &.VariableExpression.argument > .name {
    .syntax-parameter();
  }

  &.VariableExpression.global > .name {
    .syntax-global-variable();
  }

  &.PropertyLiteral {
    .syntax-property()
  }

  &.FunctionDefinition > .method-name,
  &.MethodInvocation > .method-name {
    .syntax-function()
  }

/* end .ASTNode */
}



//////////////////
//
//  Common syntax coloring methods
//
//  VS Code's Semantic Tokens:  https://github.com/microsoft/vscode-extension-samples/tree/master/semantic-tokens-sample
//
//////////////////

.syntax-pill(@bgcolor: #eee, @color: black) {
  background-color: @bgcolor;
  color: @color;
  border-radius: 15px;
  padding: 0 10px;
  position: relative;
  left: -10px;
}

.syntax-comment() {
  color: #a86;
}

.syntax-comment-header() {
  .syntax-comment();
  font-weight: bold;
}

.syntax-parser-annotation() {
  color: #ccc;
  // .syntax-pill(#ccc, #666);
  // .punctuation {
  //   display: none;
  // }
}

.syntax-string() {
  color: #a22;
}

.syntax-enum() {
  color: #a22;
}

.syntax-keyword() {
  color: blue;
}

.syntax-number() {
  color: #3a3;
}

.syntax-boolean() {
  .syntax-number()
}

.syntax-punctuation() {
  color: #ddd;
}

.syntax-operator() {
  color: red;
}

.syntax-class() {
  color: darkgreen;
  font-weight: bold;
}
.syntax-function{
  color: chocolate;
}

.syntax-variable() {
  color: cornflowerblue;
}

.syntax-variable-declaration() {
  color: cornflowerblue;
  font-weight: bold;
}

.syntax-global-variable() {
  color: mediumorchid;
}


.syntax-parameter() {
  color: goldenrod;
}

.syntax-property{
  color: sienna;
}

.syntax-regexp() {}
.syntax-namespace() {}
.syntax-type() {}
.syntax-struct() {}
.syntax-interface() {}
.syntax-type-parameter() {}

.syntax-member() {}
.syntax-macro() {}


// VSCode token modifiers
.syntax-declaration() {}
.syntax-documentation() {}
.syntax-member() {}
.syntax-static() {}
.syntax-abstract() {}
.syntax-deprecated() {}
.syntax-modification() {}
.syntax-async() {}