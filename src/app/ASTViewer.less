@import "syntax.less";

.ASTRoot {
  position: relative;
  display: flex;
  flex-direction: column;
}

.ASTViewer {
  position: relative;
  background: white;
  padding: 8px;

  &.scrolling {
    flex: 1 1 auto;
    overflow: auto;
  }
}

.ASTNode {
  white-space: pre;

  &.highlight {
    background: @highlight-color;
    text-decoration: underline;
  }

  /* Block with curlies inside an ASTNode. */
  .ASTBlock.indented {
    // Indent blockContents. This looks right but loses spaces on copy-paste.
    & > .blockContents {
      display: inline-block;
      vertical-align: top;
      margin-left: 1em;

      & > .whitespace.indent {
        display: none;
      }
    }
  /* end .ASTBlock */
  }s

  .punctuation {
    .syntax-punctuation()
  }
  .operator {
    .syntax-operator()
  }

  .keyword,
    &.NullLiteral,
    &.UndefinedLiteral,
    &.ThisLiteral {
    .syntax-keyword()
  }

  &.LineComment,
  &.BlockComment {
    .syntax-comment()
  }

  &.LineComment.header {
    .syntax-comment-header()
  }

  &.ParserAnnotation {
    .syntax-parser-annotation()
  }

  &.ParseError {
    .syntax-parse-error()
  }

  &.StringLiteral,
  &.QuotedExpression,
  &.QuotedExpression .PropertyLiteral {
    .syntax-string()
  }  

  &.ConstantExpression {
    .syntax-enum()
  }

  &.NumericLiteral {
    .syntax-number()
  }

  &.BooleanLiteral {
    .syntax-boolean()
  }

  &.TypeExpression {
    .syntax-class()
  }
  // &.PrototypeExpression .keyword.prototype {
  //   .syntax-class()
  // }


  &.VariableExpression > .name {
    .syntax-variable()
  }
  &.AssignmentStatement.declaration .VariableExpression > .name {
    .syntax-variable-declaration()
  }

  &.VariableExpression.argument > .name {
    .syntax-parameter();
  }

  &.VariableExpression.global > .name {
    .syntax-global-variable();
  }

  &.PropertyLiteral {
    .syntax-property()
  }

  &.MethodDefinition > .method-name,
  &.MethodInvocation > .method-name {
    .syntax-function()
  }

/* end .ASTNode */
}



