@import "syntax.less";

.ASTViewer {
  position: relative;
  padding: 8px;

  &.scroll {
    height: 100%;
    overflow: auto;
  }
}


.ASTNode {
  white-space: pre;

  &.highlight {
    background: rgb(245, 236, 212);
  }

  /* Block with curlies inside an ASTNode. */
  .ASTBlock.indented {
    // Indent blockContents. This looks right but loses spaces on copy-paste.
    & > .blockContents {
      display: inline-block;
      vertical-align: top;
      margin-left: 1em;
    }
  /* end .ASTBlock */
  }s

  .punctuation {
    .syntax-punctuation()
  }
  .operator {
    .syntax-operator()
  }

  .keyword,
  &.ThisLiteral {
    .syntax-keyword()
  }

  &.LineComment,
  &.BlockComment {
    .syntax-comment()
  }

  &.LineComment.header {
    .syntax-comment-header()
  }

  &.ParserAnnotation {
    .syntax-parser-annotation()
  }

  &.StringLiteral,
  &.QuotedExpression,
  &.QuotedExpression .PropertyLiteral {
    .syntax-string()
  }  

  &.ConstantExpression {
    .syntax-enum()
  }

  &.NumericLiteral {
    .syntax-number()
  }

  &.BooleanLiteral {
    .syntax-boolean()
  }

  &.TypeExpression {
    .syntax-class()
  }
  // &.PrototypeExpression .keyword.prototype {
  //   .syntax-class()
  // }


  &.VariableExpression > .name {
    .syntax-variable()
  }
  &.AssignmentStatement.declaration .VariableExpression > .name {
    .syntax-variable-declaration()
  }

  &.VariableExpression.argument > .name {
    .syntax-parameter();
  }

  &.VariableExpression.global > .name {
    .syntax-global-variable();
  }

  &.PropertyLiteral {
    .syntax-property()
  }

  &.FunctionDefinition > .method-name,
  &.MethodInvocation > .method-name {
    .syntax-function()
  }

/* end .ASTNode */
}



