## Klondike Solitaire Card Game
-- See [wikipedia](https://en.wikipedia.org/wiki/Klondike_(solitaire)) for rules & naming conventions.

## Game bits
a game is an app
a game has a score as a number
set the game to a new game
print the game

## set up all piles
set piles to a new list of piles
set foundations to a new list of piles
set tableaus to a new list of piles

// set up stock pile: unplayed cards
a stock-pile is a pile
a stock-pile "can pick up (a card)" if: the card is its bottom card 
set the stock to a new stock-pile with name = "stock", droppable = no, auto-play = no
add the stock to the piles

// set up discards: where played cards go when turning over stock
a discard-pile is a pile
a discard-pile "can pick up (a card)" if: the card is its bottom card 
set discards to a new discard-pile with name = "discards", droppable = no, auto-play = yes
add discards to the piles

// set up tableau piles: vertical piles where we arrange from king to ace
a tableau is a pile
a tableau "can pick up (a card)" if: the card is face up
a tableau "can play (a card)" if: 
	if the tableau is empty
		return the card is a king
	return its color is not the color of the card and its value is the value of the card + 1
for each number from 1 to 7
	get a new tableau with name = ("T" + the number), droppable = yes, auto-play = yes
	add it to the piles
	add it to the tableaus

// set up foundation piles: where we build up from ace => king
a foundation is a pile
a foundation "can pick up (a card)" if: never
a foundation "can play (a card)" if: 
	return (its name is the suit of the card) and (its value + 1 is the value of the card)
for each suit in card suits
	get a new foundation with name = the suit, droppable = yes, auto-play = no
	add it to the piles
	add it to the foundations


// set up deck of cards
set the deck to a new deck
set up the deck
// start with cards in the stock pile
for each card in the deck
	move it to the stock


## actions

the state of a game is:
	set state to []
	for each pile in the piles
		add the state of the pile to state
	return state

to debug the game
	for each line of the state of the game
		print the line

to reset the stock pile
	set cards to a copy of list discards as a pile
	reverse the cards
	for each card in the cards
		move it to the stock
		turn the card face down

to play from the stock pile
	start exclusive animation playing-from-stock
	if the stock is empty 
		wait for: reset the stock pile

	get the bottom card of stock
	turn it face up
	// pause for 150 msec
	move it to the discards
	end animation playing-from-stock

to deal the cards
	// make sure we don't run this twice at the same time
	start exclusive animation dealing 
	
	// pull all cards into stock with a nice animation
	set cards to merge the piles into a new pile
	reverse the cards
	for each card in the cards
		set start-pile to the pile of the card
		turn the card face down
		if start-pile is discards // move discards right away
			move the card to the stock
		else if start-pile is not the stock // animate everything else not in stock
			wait for: move the card to the stock
	shuffle the stock
	
	// deal cards into tableaus
	for row from 1 to 7
		turn (the bottom card of the stock) face up
		for column from row to 7
			wait for: move the bottom card of the stock to item column of the tableaus

	wait for: play from the stock pile
	finish animation dealing

to play (a card)
	set start-pile to the pile of the card
	if start-pile cannot pick up the card return no
	
	if start-pile is the stock
		play from the stock pile
		return
	
	set droppable-piles to piles in the piles where its droppable is yes and it can play the card
	set end-pile to the first pile in droppable-piles
	if end-pile is not defined return no

	set cards-to-move to (cards in start-pile starting with the card)
	for each card in cards-to-move
		move it to end-pile
	pause for 100 msec

	if the start-pile is a tableau and the start-pile is not empty
		turn the last card of the start-pile face up

	if end-pile is a foundation: set the score of the game to the score of the game + 10
	else if start-pile is discards: set the score of the game to the score of the game + 5

to auto-play
	print collapsed group "auto-play"
	print warning "before"
	debug the game
	set auto-play-piles to piles in the piles where it is not empty and its auto-play is yes
	for each pile in the auto-play-piles
		set face-up-cards to the cards in the pile where the card is face up
		if face-up-cards is empty return
		get the first card in face-up-cards
		// don't move kings if they're already at the base of a tableau
		if (it is a king) and (it is the first card of its pile) and (its pile is a tableau) return
		await play it
	print warning "after"
	debug the game
	end print group

to reset the game
	set the score of the game to 0
	deal the cards

to cheat
	set remaining-piles to piles in the tableaus where it is not empty and its first card is face down
	if remaining-piles is empty return
	set the pile to a random pile in remaining-piles
	set unplaid-cards to cards in the pile where the card is face down
	set card to a random card in unplaid-cards
	turn the card face up
	pause for 30 ticks
	move the card to discards

##############
## rendering the bits

// note: tableaus just draw as a (vertical) list of cards

to draw (a foundation):
	if it is empty
		if its name is clubs return <div className="Pile Placeholder ui button basic compact fluid black"><span className="suit clubs">♣️</span></div>
		if its name is diamonds return <div className="Pile Placeholder ui button basic compact fluid red"><span className="suit diamonds">♦️</span></div>
		if its name is hearts return <div className="Pile Placeholder ui button basic compact fluid red"><span className="suit hearts">♥️</span></div>
		if its name is spades return <div className="Pile Placeholder ui button basic compact fluid black"><span className="suit spades">♠️</span></div>
	return draw its bottom card

to draw (a stock-pile):
	if it is empty
		return <div onClick={play from the stock pile} className="Pile Placeholder ui button basic compact fluid"></div>
	return draw its bottom card

to draw (a discard-pile):
	if it is empty
		return <div onClick={play from the stock pile} className="Pile Placeholder ui button basic compact fluid"></div>
	return draw its bottom card

to draw (a card):
	set className to "Card face-" + its direction + " "	+ its rank + " " + its suit + " ui button compact fluid "
	if it is face down 
		return <div onClick={play the card} className={className}><i className="fitted bicycle icon"/></div>
	return <div onClick={play the card} className={className +	its color}>
		{the short-rank of the card + " "}
		<span className="suit">{the short-suit of the card}</span>
	</div>

to draw (a game)
 	return <div>
		<div className="board">
			<table className="ui table fixed">
				<thead>
					<tr>
						<th colSpan="2" className="left aligned">Klondike Solitaire</th>
						<th className="right aligned">{"Score: " + the score of the game}</th>
						<th><div className="tiny fluid ui button compact" onClick={auto-play}>AutoPlay</div></th>
						<th><div className="tiny fluid ui button compact" onClick={cheat}>Cheat</div></th>
						<th><div className="tiny fluid ui button compact" onClick={debug the game}>Debug</div></th>
						<th><div className="tiny fluid ui button compact" onClick={reset the game}>Restart</div></th>
					</tr>
				</thead>
				<tbody>
				<tr>
						<td>{draw the stock}</td>
						<td>{draw the discards}</td>
						<td></td>
						<td>{draw the first pile in foundations}</td>
						<td>{draw the second pile in foundations}</td>
						<td>{draw the third pile in foundations}</td>
						<td>{draw the fourth pile in foundations}</td>
				</tr>
				<tr>
						<td>{draw item 1 of the tableaus}</td>
						<td>{draw item 2 of the tableaus}</td>
						<td>{draw item 3 of the tableaus}</td>
						<td>{draw item 4 of the tableaus}</td>
						<td>{draw item 5 of the tableaus}</td>
						<td>{draw item 6 of the tableaus}</td>
						<td>{draw item 7 of the tableaus}</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
	
reset the game
start the game

