## Klondike Solitaire Card Game
-- See [wikipedia](https://en.wikipedia.org/wiki/Klondike_(solitaire)) for rules & naming conventions.

## Game bits
a card-game is an app
a card-game has a score as a number
a card-game has a property piles as a new list
set the game to a new card-game
print the game

// set up deck of cards
set the deck to a new deck
set up the deck

// set up stock pile: unplayed cards
a stock-pile is a pile
a stock-pile "can pick up (a card)" if: the card is its bottom card 
set the stock to a new stock-pile with name = "stock", droppable = no, auto-play = no
add the stock to the piles of the game

// set up discards: where played cards go when turning over stock
a discard-pile is a pile
a discard-pile "can pick up (a card)" if: the card is its bottom card 
set discards to a new discard-pile with name = "stock", droppable = no, auto-play = yes
add discards to the piles of the game

// set up foundation piles: where we build up from ace => king
a foundation is a pile
a foundation "can pick up (a card)" if: never
a foundation "can play (a card)" if: 
	if the name of the foundation is not the suit of the card return no
	return the value of the foundation + 1 is the value of the card
for each suit in card suits
	get a new foundation with name = the suit, droppable = yes, auto-play = no
	add it to the piles of the game
	
// set up tableau piles: vertical piles from king => ace
a tableau is a pile
a tableau "can pick up (a card)" if:
	if the card is face up return yes
	return the card is the bottom card of the tableau
a tableau "can play (a card)" if: 
	if the tableau is empty
		return the card is a king
	if the color of the tableau is the color of the card return no
	return the value of the tableau is the value of the card + 1
for each number from 1 to 7
	get a new tableau with name = ("T" + the number), droppable = yes, auto-play = yes
	add it to the piles of the game

set foundations to piles in (the piles of the game) where the pile is a foundation
set tableaus to piles in (the piles of the game) where the pile is a tableau

## actions

to display (a pile)
	set output to its name + ":"
	for each card in the pile
		set output to output + ":" + (display the card)
	echo output
	
to display (a card-game)
	for each pile in its piles: display the pile

to reset stock
	set cards to cards in discards starting with the first card in discards
	reverse the cards
	for each card in cards
		turn the card face down
		move it to the stock
		
to turn over stock
	if the stock is empty 
		reset stock
		return
	// `repeat 3 times` for some versions of klondike
	turn the bottom card of stock face up
	pause for 20 ticks
	move the bottom card of stock to the discards

to deal the cards
	for each card and number in the deck
		turn the card face down
		move the card to the stock
		pause for 10 msec
	shuffle the stock
	for row from 1 to 7
		turn the bottom card of the stock face up
		for column from row to 7
			move the bottom card of the stock to item column of the tableaus
			pause for 10 msec
	turn over stock

to play (a card)
	set start-pile to the pile of the card
	if start-pile cannot pick up the card return no
	
	if start-pile is the stock
		turn over stock
		return
	
	set droppable-piles to piles in (the piles of the game) where its droppable is yes and it can play the card
	set end-pile to the first pile in droppable-piles
	if end-pile is not defined return no

	set cards-to-move to cards in start-pile starting with the card
	for each card in cards-to-move
		move it to end-pile

	if the start-pile is a tableau and the start-pile is not empty
		turn the last card of the start-pile face up

	if end-pile is a foundation: set the score of the game to the score of the game + 10
	else if start-pile is discards: set the score of the game to the score of the game + 5

to auto-play
	set auto-play-piles to piles in (the piles of the game) where it is not empty and its auto-play is yes
	for each pile and pile-num in the auto-play-piles
		set cards to the cards in the pile where the card is face up
		if cards is empty return
		set the card to the first card of cards
		if the card is a king and the card is the first card of the pile return
		play the card
		pause for 100 msec

to reset the game
	set the score of the game to 0
	deal the cards

to cheat
	set remaining-piles to piles in the tableaus where it is not empty and its first card is face down
	if remaining-piles is empty return
	set the pile to a random pile in remaining-piles
	set unplaid-cards to cards in the pile where the card is face down
	set card to a random card in unplaid-cards
	turn the card face up
	pause for 30 ticks
	move the card to discards

##############
## rendering the bits

// note: tableaus just draw as a (vertical) list of cards

to draw (a foundation):
	if it is empty
		if its name is clubs return <div className="Card Placeholder ui button basic compact fluid black">♣️</div>
		if its name is diamonds return <div className="Card Placeholder ui button basic compact fluid red">♦️</div>
		if its name is hearts return <div className="Card Placeholder ui button basic compact fluid red">♥️</div>
		if its name is spades return <div className="Card Placeholder ui button basic compact fluid black">♠️</div>
	return draw its bottom card

to draw (a stock-pile):
	if it is empty
		return <div onClick={turn over stock} className="Card Placeholder ui button basic compact fluid"></div>
	return draw its bottom card

to draw (a discard-pile):
	if it is empty
		return <div onClick={turn over stock} className="Card Placeholder ui button basic compact fluid"></div>
	return draw its bottom card

to draw (a card):
	set className to "Card face-" + its direction + " "	+ its rank + " " + its suit + " ui button compact fluid "
	if it is face down 
		return <div onClick={play the card} className={className}><i className="fitted bicycle icon"/></div>
	return <div onClick={play the card} className={className +	its color}>{the short-rank of the card + " " + the short-suit of the card}</div>

to draw (a card-game)
 	return <div>
		<div className="board">
			<table className="ui table fixed">
				<thead>
					<tr>
						<th colSpan="2" className="left aligned">Klondike Solitaire</th>
						<th className="right aligned">{"Score: " + the score of the game}</th>
						<th><div className="tiny fluid ui button compact" onClick={auto-play}>AutoPlay</div></th>
						<th><div className="tiny fluid ui button compact" onClick={cheat}>Cheat</div></th>
						<th><div className="tiny fluid ui button compact" onClick={display the game}>Debug</div></th>
						<th><div className="tiny fluid ui button compact" onClick={reset the game}>Restart</div></th>
					</tr>
				</thead>
				<tbody>
				<tr>
						<td>{draw the stock}</td>
						<td>{draw the discards}</td>
						<td></td>
						<td>{draw the first pile in foundations}</td>
						<td>{draw the second pile in foundations}</td>
						<td>{draw the third pile in foundations}</td>
						<td>{draw the fourth pile in foundations}</td>
				</tr>
				<tr>
						<td>{draw item 1 of the tableaus}</td>
						<td>{draw item 2 of the tableaus}</td>
						<td>{draw item 3 of the tableaus}</td>
						<td>{draw item 4 of the tableaus}</td>
						<td>{draw item 5 of the tableaus}</td>
						<td>{draw item 6 of the tableaus}</td>
						<td>{draw item 7 of the tableaus}</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
	
reset the game
start the game

