//  # Parser Rules
//  Rules can be as simple as a string `Keyword` or a complex sequence of (nested) rules.
//
//  Parse a rule with `rule.parse(parser, tokens, start, end)`, this will either:
//    - return `undefined` if the rule doesn't match the head of the tokens, or
//    - return a CLONE of the matched rule with at least the following:
//      - `matched`    Results of your parse.
//      - `nextStart`  Place where next match should start (eg: one beyond what you matched).
//
//  The clone returned above can be manipulated with
//    - `rule.compile()`    Return javascript source to interpret the rule.
//    - `rule.toSyntax()`    Return ruleSyntax for the rule (mostly for debugging)
//    -
//
import { isNode } from "browser-or-node";

import Parser from "./Parser.js";
import Match from "./Match.js";
import ParseError from "./ParseError.js";
import Tokenizer, { matchLiterals } from "./Tokenizer.js";
import { isWhitespace } from "./utils/string";

// Show debug messages on browser only.
const DEBUG = !isNode;


// Abstract Rule class.
// TODOC
export default class Rule {
  constructor(props) {
    Object.assign(this, props);
  }

  //
  //  Parsing methods -- you MUST implement these in your subclasses!
  //

  // Test to see if bits of our rule are found ANYWHERE between `start` and `end` of the `tokens`.
  // This is used by complicated (eg: left recursive) rules to exit quickly
  // if there's no chance of success.
  //
  // Returns:
  //  - `true` if the rule MIGHT be matched.
  //  - `false` if there is NO WAY the rule can be matched.
  //  - `undefined` if not determinstic (eg: no way to tell quickly).
  test(parser, tokens, start, end) {}

  // Attempt to match this rule between `start` and `end` of `tokens`.
  // If successful, returns a `Match` object which you can use to figure out the results.
  // If unsuccessful, returns `undefined`.
  parse(parser, tokens, start, end, stack) {}

  // Output javascript source for this rule passed a successful `match` generated by it.
  // You may want to look at `match.matches` or `match.results`, etc.
  compile(match) {}

  // Return the precedence for this rule as matched.
  // Override to do something funky (e.g. `infix_operator_expression`)
  getPrecedence(match) {
    return this.precedence || 0;
  }
}

// Abstract rule for one or more sequential literal values to match.
// `rule.literals`:
//    the literal string or array of literal strings to match.
// `rule.literalSeparator`
//    the string to put between multiple literals when joining multiple literals together.
//
// On successful parse, yields a `match` where:
//  `match.rule` is the rule which was parsed
//  `match.matched` is the actual string matched
//  `match.nextStart` is the index of the next start token
Rule.Literals = class literals extends Rule {
  constructor(props) {
    // If passed a string, split and use that as our `literals`
    if (typeof props === "string") {
      super();
      this.literals = props;
    }
    // otherwise assume we got an array of property maps
    else {
      super(props);
    }
    // coerce `literals` to an array
    if (typeof this.literals === "string") {
      this.literals = this.literals.split(this.literalSeparator);
    }
  }

  // Does this match appear ANYWHERE in the tokens?
  test(parser, tokens, start = 0, end = tokens.length) {
    let first = this.literals[0];
    for (var index = start; index < end; index++) {
      if (tokens[index] !== first) continue;
      if (matchLiterals(this.literals, tokens, index, end)) return true;
    }
    return false;
  }

  // Attempt to match this rule in the `tokens`.
  // Returns results of the parse or `undefined`.
  parse(parser, tokens, start = 0, end, stack) {
    if (!matchLiterals(this.literals, tokens, start, end)) return undefined;
    return new Match({
      rule: this,
      matched: this.literals.join(this.literalSeparator),
      nextStart: start + this.literals.length
    });
  }

  compile(match) {
    return match.matched;
  }

  toSyntax() {
    return `${this.literals.join(this.literalSeparator || "")}${this.optional ? "?" : ""}`;
  }
};
Object.defineProperty(Rule.Literals.prototype, "literalSeparator", { value: "" });

// One or more literal symbols: `<`, `%` etc.
// Symbols join WITHOUT spaces.
Rule.Symbols = class symbols extends Rule.Literals {};

// One or more literal keywords.
// Keywords join WITH spaces.
Rule.Keywords = class keywords extends Rule.Literals {};
Object.defineProperty(Rule.Keywords.prototype, "literalSeparator", { value: " " });

// Regex pattern to match a SINGLE token.
// `rule.pattern` is the regular expression to match.
//    Note that you MUST start your pattern with `^` and end with `$` to make sure it matches the entire token.
//    Note that this can only match a single token!
// `rule.blacklist` is a map of `{ key: true }` for strings which will NOT be accepted.
//
// After parsing
//  `rule.matched` will be the string which was matched.
//  `rule.nextStart` is the index of the next start token.
Rule.Pattern = class pattern extends Rule {
  constructor(props) {
    super(props);
    // convert blacklist to a map if necessary
    if (Array.isArray(this.blacklist)) {
      this.blacklist = this.blacklist.reduce((map, key) => {
        map[key] = true;
        return map;
      }, {});
    }
  }

  // Test to see if any of our pattern is found ANYWHERE in the tokens.
  test(parser, tokens, start = 0, end = tokens.length) {
    for (let index = start; index < end; index++) {
      const token = tokens[index];
      if (typeof token !== "string") continue;
      if (this.pattern.test(token) && (!this.blacklist || !this.blacklist[token])) return true;
    }
    return false;
  }


  // Attempt to match this pattern at the beginning of the tokens.
  parse(parser, tokens, start = 0, end, stack) {
    const token = tokens[start];
    if (typeof token !== "string") return undefined;

    const match = token.match(this.pattern);
    if (!match) return undefined;

    // bail if present in blacklist
    const matched = match[0];
    if (this.blacklist && this.blacklist[matched]) return undefined;

    return new Match({
      rule: this,
      matched,
      nextStart: start + 1
    });
  }

  compile(match) {
    return match.matched;
  }
};

// Subrule -- name of another rule to be called.
// `rule.subrule` is the name of the rule in `parser.rules`.
//
// After parsing
//  we'll return the actual rule that was matched (rather than a clone of this rule)
Rule.Subrule = class subrule extends Rule {
  constructor(props) {
    if (typeof props === "string") {
      super();
      this.subrule = props;
    }
    else {
      super(props);
    }
  }

  parse(parser, tokens, start = 0, end, stack) {
    const match = parser.parseNamedRule(this.subrule, tokens, start, end, stack);
    if (!match) return undefined;
    if (this.argument) match.argument = this.argument;
    if (this.promote) match.promote = this.promote;
    return match;
  }

  // Ask the subrule to figure out if a match is possible.
  test(parser, tokens, start = 0, end) {
    return parser.test(this.subrule, tokens, start, end);
  }

  toSyntax() {
    return (
      `{${this.argument ? this.argument + ":" : ""}` + `${this.subrule}}${this.optional ? "?" : ""}`
    );
  }
};

// Alternative syntax, matching one of a number of different rules.
// The result of a parse is the longest rule that actually matched.
// NOTE: Currently takes the longest valid match.
// TODO: match all valid alternatives
//
// After parsing
//  we'll return the rule which is the "best match" (rather than cloning this rule).
Rule.Alternatives = class alternatives extends Rule {
  constructor(props) {
    super(props);
    if (!this.rules) this.rules = [];
  }

  // Test to see if any of our alternatives are found ANYWHERE in the tokens.
  test(parser, tokens, start = 0, end) {
    for (let i = 0, rule; rule = this.rules[i]; i++) {
      if (rule.test(parser, tokens, start, end)) return true;
    }
    return false;
  }

  // Find all rules which match and delegate to `getBestMatch()` to pick the best one.
  parse(parser, tokens, start = 0, end, stack) {
    if (DEBUG) console.group(`matching alternatives ${this.group || this.argument || this.name || this.toSyntax()}`);
    const matches = [];
    for (let i = 0, rule; rule = this.rules[i]; i++) {
      let match = rule.parse(parser, tokens, start, end, stack);
      if (match) matches.push(match);
      if (DEBUG && match) console.log(rule.name, match);
    }
    if (DEBUG && matches.length) console.log("matches: ", matches);
    if (DEBUG) console.groupEnd();

    if (!matches.length) return undefined;

    if (DEBUG && matches.length > 1) {
      console.group(`got alternatives for ${this.argument || this.group}`);
      matches.forEach(match => console.info(start, match, match.precedence, match.compile()));
      Rule.Sequence.logStack(stack);
      console.groupEnd();
    }

    let match = matches.length === 1 ? matches[0] : this.getBestMatch(matches);

    // assign special properties to the result
//TODO: do we need all of this???
    if (this.argument) match.argument = this.argument;
    if (this.group) match.group = this.group;
    if (this.promote) match.promote = this.promote;

    return match;
  }

  // Return the "best" match given more than one matches at the head of the tokens.
  // First we find the match(es) with the highest preceedence.
  // Then we take the one with the longest matched string.
  // If more than one rule with same length, takes LATEST one.
  getBestMatch(matches) {
    if (matches.length === 1) return matches[0];

    // Filter to rules with highest precedence.
    // NOTE: we run this BACKWARDS to put later-defined rules first
    let match;
    let highPriority = [];
    for (let max = -Infinity, i = 0; match = matches[i++];) {
      const { precedence } = match;
      if (precedence > max) {
        max = precedence;
        highPriority = [match];
      }
      else if (precedence === max) {
        highPriority.push(match);
      }
    }

    if (highPriority.length === 1) return highPriority[0];

    // Return the longest rule (???)
    // NOTE: we go backwards through the list so the LATEST rule comes first
    let longest;
    for (let i = highPriority.length; match = highPriority[--i];) {
      if (!longest || match.nextStart >= longest.nextStart) longest = match;
    }
    return longest;
  }

  addRule(...rule) {
    this.rules.push(...rule);
  }

  toSyntax() {
    const rules = this.rules.map(rule => rule.toSyntax()).join("|");
    const promote = this.promote ? "?:" : "";
    const argument = this.argument ? `${this.argument}:` : "";
    return `(${promote}${argument}${rules})${this.optional ? "?" : ""}`;
  }
};

// Alias for `Rule.Alternatives` used to merge alternatives together
// when implicitly combining multiple rules under the same name.
// This lets us distinguish
//  - actually defining a semantically-meaning "alternatives" and
//  - smooshing rules together because they share the same name
Rule.Group = class group extends Rule.Alternatives {};


// Repeating rule.
//  `this.repeat` is the rule that repeats.
//  `this.optional` is true if the prodution is optional.
//  `rule.testRule` is a QUICK rule to test if there's any way the sequence can match.
//
//  Note: Automatically consumes whitespace before rules.
//  Note: Returns `undefined` if we don't match at least once.
//
// After matching:
//  `this.matched` is array of matched rules.
//  `rule.nextStart` is the index of the next start token.
Rule.Repeat = class repeat extends Rule {
  // Check `testRule` if provided.
  test(parser, tokens, start, end) {
    if (this.testRule) return parser.test(this.testRule, tokens, start, end);
  }

  parse(parser, tokens, start = 0, end = tokens.length, stack) {
    // Bail quickly if no chance
    if (this.test(parser, tokens, start, end) === false) return undefined;

    const matched = [];
    let nextStart = start;
    while (nextStart < end) {
      let match = this.repeat.parse(parser, tokens, nextStart, end, stack);
      if (!match) break;
      if (nextStart === match.nextStart) {
        throw new TypeError(`repeat rule ${this.name}: got unproductive match`);
      }
      matched.push(match);
      nextStart = match.nextStart;
    }

    // Forget it if nothing matched at all
    if (matched.length === 0) return undefined;

    return new Match({
      rule: this,
      matched,
      nextStart
    });
  }

  compile(match) {
    return match.matched.map(match => match.compile());
  }

  toSyntax() {
    let isCompoundRule =
      this.repeat instanceof Rule.Sequence ||
      (this.repeat instanceof Rule.Literals && this.repeat.literals.length > 1);
    const repeat = this.repeat.toSyntax();
    const rule = isCompoundRule ? `(${repeat})` : `${repeat}`;
    return `${rule}${this.optional ? "*" : "+"}`;
  }
};

// List match rule:   `[<item><delimiter>]`. eg" `[{number},]` to match `1,2,3`
//  `rule.item` is the rule for each item,
//  `rule.delimiter` is the delimiter between each item, which is optional at the end.
//
// After matching:
//  `this.matched` is array of matched item rules (delmiter is ignored).
//  `rule.nextStart` is the index of the next start token.
//
// NOTE: we assume that a List rule itself will NOT repeat (????)
Rule.List = class list extends Rule {
  // Check `testRule` if provided.
  test(parser, tokens, start, end) {
    if (this.testRule) return parser.test(this.testRule, tokens, start, end);
  }

  parse(parser, tokens, start = 0, end = tokens.length, stack) {
    // Bail quickly if no chance
    if (this.test(parser, tokens, start, end) === false) return undefined;

    // ensure item and delimiter are optional so we don't barf in `parseRule`
    //TODO: ???
    this.item.optional = true;
    this.delimiter.optional = true;

    let matched = [];
    let nextStart = start;
    while (nextStart < end) {
      // get next item, exiting if not found
      let item = this.item.parse(parser, tokens, nextStart, end, stack);
      if (!item) break;

      matched.push(item);
      nextStart = item.nextStart;

      // get delimiter, exiting if not found
      let delimiter = this.delimiter.parse(parser, tokens, nextStart, end, stack);
      if (!delimiter) break;
      nextStart = delimiter.nextStart;
    }

    // If we didn't get any matches, forget it.
    if (matched.length === 0) return undefined;

    return new Match({
      rule: this,
      matched,
      nextStart
    });
  }

  // Returns JS Array of matched items as source.
  //TODO: `JSDelimiter` to return as a single string?
  compile(match) {
    if (!match.matched) return [];
    return match.matched.map(match => match.compile());
  }

  toSyntax() {
    const item = this.item.toSyntax();
    const delimiter = this.delimiter.toSyntax();
    return (
      `[${this.argument ? this.argument + ":" : ""}${item} ${delimiter}]` +
      `${this.optional ? "?" : ""}`
    );
  }
};


// Sequence of rules to match.
//  `rule.rules` is the array of rules to match.
//  `rule.testRule` is a QUICK rule to test if there's any way the sequence can match.
//  `rule.leftRecursive` should be `true` if the first non-optional rule in our `rules`
//    may end up calling us again.  In this case, you should provide `rule.testRule`.
//
// After parsing
//  `rule.matched` will be the array of rules which were matched.
//  `rule.nextStart` is the index of the next start token.
Rule.Sequence = class sequence extends Rule {
  test(parser, tokens, start, end) {
    if (this.testRule) return parser.test(this.testRule, tokens, start, end);
  }

  parse(parser, tokens, start = 0, end = tokens.length, stack) {
    // Bail quickly if no chance
    if (this.test(parser, tokens, start, end) === false) return undefined;

    // If we're a leftRecursive sequence...
    if (this.leftRecursive) {
      // If the stack already contains this rule, forget it.
      if (stack) {
        const index = stack.rules.indexOf(this);
        if (index > -1) {
          // if (DEBUG) Rule.Sequence.logStack(stack);
          if (start > stack.starts[index]) {
            // if (DEBUG) console.info(`${start}: recursing into ${this.name}`);
          }
          else {
            // if (DEBUG) console.info(`${start}: skipping ${this.name}`);
            return undefined;
          }
        }
      }
//       if (stack && stack.rules.includes(this)) {
// console.info(`${start}: skipping ${this.name}`, stack);
//         return undefined;
//       }
    }

    // Clone stack and add this rule for recursion...
    // NOTE: we really only need to do this for leftRecursive rules,
    //       consider moving this up into block above
    const matched = [];
    stack = {
      rules: stack ? [this, ...stack.rules] : [this],
      starts: stack ? [start, ...stack.starts] : [start],
      matched: stack ? [matched, ...stack.matched] : [matched]
    }

    // Match each token in turn
    let nextStart = start;
    for (let i = 0, rule; rule = this.rules[i]; i++) {
      let match = rule.parse(parser, tokens, nextStart, end, stack);
      if (!match && !rule.optional) return undefined;
      if (match) {
        matched.push(match);
        nextStart = match.nextStart;
      }
    }

    // if we get here, we matched all the rules!
    return new Match({
      rule: this,
      matched,
      nextStart
    })
  }

  // Log the stack of
  static logStack(stack) {
    if (!DEBUG) return;
    if (!stack) {
      console.group("stack is empty");
    }
    else {
//    console.groupCollapsed("stack");
      console.group("stack");
      stack.rules.forEach((rule, i) => console.info(stack.starts[i], rule.name, [...stack.matched[i]]));
    }
    console.groupEnd();
  }

  // You MUST override `compile` in your sequence rule if it is ever going to be called directly.
  compile(match) {
    throw new ParseError(`Sequence ${this.name} MUST provide a compile() method`)
  }

  //TODOC
  // "gather" matched values into a map in preparation to call `compile(match)`
  getResults({ rule, matched, comment }) {
    if (!matched) return undefined;
    let results = addResults({}, matched);
    if (comment) {
      console.warn(`statement ${rule.name} got comment`, comment);
      results.comment = matched.comment;
    }
    return results;

    function addResults(results, matched) {
      for (let i = 0, match; match = matched[i]; i++) {
        const { promote, name } = match;
        if (promote) {
          return addResults(results, match.matched);
        } else {
          if (name == null) continue;

          const source = match.compile();
          // If arg already exists, convert to an array
          if (name in results) {
            if (!Array.isArray(results[name])) {
              results[name] = [results[name]];
            }
            results[name].push(source);
          } else {
            results[name] = source;
          }
        }
      }
      return results;
    }
  }

  // Echo this rule back out.
  toSyntax() {
    const rules = this.rules.map(rule => rule.toSyntax());
    return `${rules.join(" ")}${this.optional ? "?" : ""}`;
  }
};

// A `statement` generally represents a single line of output.
// `statements` automatically parse comments at the end of their line
//  (available as `match.comment`)
Rule.Statement = class statement extends Rule.Group {
  parse(parser, tokens, start = 0, end = tokens.length, stack) {
    let index = start;

    // eat whitespace at the front of the line
    while (tokens[index] instanceof Tokenizer.Whitespace) start++;
    if (start >= end) return;   // TODO: blank line?

    // eat comment at end of the line
    const comment = tokens[end - 1] instanceof Tokenizer.Comment
      ? parser.parseNamedRule("comment", tokens, end - 1, end)
      : undefined;
    if (comment) end--;

    const match = super.parse(parser, tokens, start, end, stack);
    if (!match && !comment) return;
    if (!match) return comment;

    if (comment) match.comment = comment;
    return match;
  }
}
Rule.Statement.prototype.group = "statement";


// `Statements` are a special case for a block of `Statement` rules
//  that understand nesting and comments.
//
// This is a top-level construct, e.g. used to parse an entire file.
Rule.Statements = class statements extends Rule {
  // Split statements up into blocks and parse 'em.
  parse(parser, tokens, start = 0, end = tokens.length, stack) {
    var block = Tokenizer.breakIntoBlocks(tokens, start, end);
    return Rule.Statements.parseBlock(parser, block);
  }

  // Parse an entire `block`, returning array of matched elements (NOT as a match).
  // NOTE: we don't worry about the `stack` here since we've entered a new parsing context.
  static parseBlock(parser, block) {
    let matched = [];
    block.contents.forEach(item => {
      if (item.length === 0) {
        matched.push(new Rule.BlankLine());
      }
      // got a nested block
      else if (item instanceof Tokenizer.Block) {
        const nested = Rule.Statements.parseBlock(parser, item);
        if (!nested) {
          console.info("expected nested result, didn't get anything");
          return;
        }
        nested.indent = item.indent;
        nested.enclose = true;

        // If the last statement is a `BlockStatement`,
        //  give it the block
        const lastStatement = matched[matched.length - 1];
        if (lastStatement.rule instanceof Rule.BlockStatement) {
          lastStatement.block = nested;
        }
        // otherwise just aadd it to the stream
        else {
          console.warn("got a nested block when we weren't expecting one");
          matched.push(nested);
        }
      } else {
        // Got a single statement
        const match = parser.parseNamedRule("statement", item);
        if (match) matched = matched.concat(match);
//        else console.warn("parseBlock expected statement, got", match);
      }
    });

    if (matched.length === 0) return undefined;

    return new Match({
      rule: new Rule.Statements(),
      matched,
      indent: block.indent,
      nextStart: matched[matched.length - 1].nextStart
    })
  }

  // Output statements match parsed with `parseBlock`
  // Set `match.enclose` to enclose in curly braces
  // Set `match.indent` to add a tab to the start of each line.
  compile(match) {
    let results = [],
      statement;

    for (var i = 0, next; next = match.matched[i]; i++) {
      try {
        statement = next.compile() || "";
      } catch (e) {
        console.error(e);
        console.warn("Error compiling statements: ", match, "statement:", next);
      }

      // Add comment to end of statement if provided
      // NOTE: this loses any whitespace before the comment...
      if (next.comment) {
        statement += " " + next.comment.compile();
      }

      if (isWhitespace(statement)) {
        results.push("");
      } else if (Array.isArray(statement)) {
        results = results.concat(statement);
      } else if (typeof statement === "string") {
        statement = statement.split("\n");
        results = results.concat(statement);
      } else {
        console.warn(
          "blockToSource(): DON'T KNOW HOW TO WORK WITH\n\t",
          statement,
          "\n\tfrom match",
          next
        );
      }
    }
    let lines = (match.indent || match.enclose)
      ? "\t" + results.join("\n\t")
      : results.join("\n");

    if (match.enclose) return `{\n${lines}\n}`;
    return lines;
  }

  // Enclose a single statement.
  static encloseStatement(statement, forceWrap) {
    if (!statement) return "{}";
    if (!forceWrap && !statement.includes("\n") && statement.length < 40) {
      return `{ ${statement.trim()} }`;
    }
    if (statement[0] !== "\t") statement = `\t${statement}`;
    return `{\n${statement}\n}`;
  }
};

// A `BlockStatement` (e.g. an `if` or `repeat`):
//  - is assumed to have an initial partial `statement`
//  - MAY have an inline `statement` (on the same line, possibly after a `:`)
//  - MAY have contents as an embedded `block`
// Note that it's considered an error to have BOTH an inline statement AND a nested block.
//
//  e.g. a `BlockStatement` with syntax `if {expression} then {statement}?` will attemt to:
//  - match the optional `statement` as an inline-statement (as `results.statement`)
//  - match an INDENTED block starting on the next line (as `result.block`)
//
//  For your convenience in `compile()`, you can just look at `results.statements`
//  which will be one of the following (whichever comes first):
//    - the block and its statements, enclosed in curly braces and indented, or
//    - the formatted `statement`, enclosed in curly brackets,
//    - `{}` if neither statement or block was matched.
//
Rule.BlockStatement = class block_statement extends Rule.Sequence {
  // Add `statements` to the results.
  getResults(match) {
    const results = super.getResults(match);
    if (!results) return undefined; // TODO???

    // If we got a block, use that for our `statements`
    const { block } = match;
    if (block) {
      results.statements = block.compile(block);
    }
    // otherwise use the `statement`, if it's empty this will return the empty string.
    else {
      results.statements = Rule.Statements.encloseStatement(results.statement);
    }
    return results;
  }
};

// Blank line representation in parser output.
Rule.BlankLine = class blank_line extends Rule {
  compile(match) {
    return "\n";
  }
};

// Comment rule -- matches tokens of type `Tokenizer.Comment`.
// Eats whitespace before the comment if found.
Rule.Comment = class comment extends Rule {
  test(parser, tokens, start = 0, end = tokens.length) {
    for (var index = start; index < end; index++) {
      if (tokens[index] instanceof Tokenizer.Comment) return true;
    }
    return false;
  }

  // Comments are special nodes in our token stream.
  parse(parser, tokens, start = 0, end = tokens.length, stack) {
    let index = start;
    while (tokens[index] instanceof Tokenizer.Whitespace) {
      index++;
      if (index >= end) return undefined;
    }
    let token = tokens[index];
    if (!(token instanceof Tokenizer.Comment)) return undefined;
    return new Match({
      rule: this,
      matched: token,
      nextStart: index + 1
    })
  }

  compile(match) {
    return "//" + `${match.matched.whitespace}${match.matched.comment}`;
  }
};

// Parser error representation in parser output.
Rule.StatementParseError = class parse_error extends Rule {
  constructor(props) {
    super(props);
    if (Parser.WARN) console.warn(this.message);
  }

  get message() {
    if (this.parsed) {
      return (
        "CANT PARSE ENTIRE STATEMENT\n" +
        "PARSED      : `" +
        this.parsed +
        "`\n" +
        "CAN'T PARSE : `" +
        this.unparsed +
        "`"
      );
    }
    return "CAN'T PARSE STATEMENT: `" + this.unparsed + "`";
  }

  compile(match) {
    return "// " + match.message.split("\n").join("\n// ");
  }
};
